// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  firstName   String
  lastName    String
  password    String
  dateOfBirth DateTime
  sex         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  doctor      Doctor?
  patient     Patient?
  roles       String[]
}

model Doctor {
  id                     String              @id @default(uuid())
  about                  String              @default("Dr")
  medicalSpecializations MedicalSpeciality[]
  visits                 Visit[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  user                   User                @relation(fields: [userId], references: [id])
  userId                 String              @unique
}

model MedicalSpeciality {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctors   Doctor[]
}

model Patient {
  id          String       @id @default(uuid())
  visits      Visit[]
  medicalData MedicalData?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
}

model MedicalData {
  id                String   @id @default(uuid())
  height            Float
  weight            Float
  medicalConditions String
  medications       String
  allergies         String
  addictions        String
  pesel             String   @unique
  bloodType         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  patient           Patient  @relation(fields: [patientId], references: [id])
  patientId         String   @unique
}

model Visit {
  id            String        @id @default(uuid())
  date          DateTime
  reason        String
  doctor        Doctor        @relation(fields: [doctorId], references: [id])
  doctorId      String
  patient       Patient       @relation(fields: [patientId], references: [id])
  patientId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  visitStatus   VisitStatus   @relation(fields: [visitStatusId], references: [id])
  visitStatusId String
  visitSummary  VisitSummary?
  visitChat     VisitChat?
}

model VisitStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  visits    Visit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitSummary {
  id        String   @id @default(uuid())
  summary   String
  visit     Visit    @relation(fields: [visitId], references: [id])
  visitId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitChat {
  id        String        @id @default(uuid())
  messages  ChatMessage[]
  visit     Visit         @relation(fields: [visitId], references: [id])
  visitId   String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ChatMessage {
  id        String    @id @default(uuid())
  message   String
  sender    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat      VisitChat @relation(fields: [chatId], references: [id])
  chatId    String
}
